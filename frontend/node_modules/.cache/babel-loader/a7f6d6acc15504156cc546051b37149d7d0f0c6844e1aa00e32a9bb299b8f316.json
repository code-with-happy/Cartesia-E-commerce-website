{"ast":null,"code":"var _jsxFileName = \"E:\\\\cartesia\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useReducer, useContext, useEffect } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  items: [],\n  totalItems: 0,\n  totalPrice: 0\n};\n\n// Create context\nconst CartContext = /*#__PURE__*/createContext(initialState);\n\n// Cart reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      const existingItemIndex = state.items.findIndex(item => item.id === action.payload.id);\n      if (existingItemIndex >= 0) {\n        // Item exists, update quantity\n        const updatedItems = [...state.items];\n        updatedItems[existingItemIndex] = {\n          ...updatedItems[existingItemIndex],\n          quantity: updatedItems[existingItemIndex].quantity + action.payload.quantity\n        };\n        return {\n          ...state,\n          items: updatedItems,\n          totalItems: state.totalItems + action.payload.quantity,\n          totalPrice: state.totalPrice + action.payload.price * action.payload.quantity\n        };\n      } else {\n        // Add new item\n        return {\n          ...state,\n          items: [...state.items, action.payload],\n          totalItems: state.totalItems + action.payload.quantity,\n          totalPrice: state.totalPrice + action.payload.price * action.payload.quantity\n        };\n      }\n    case 'REMOVE_FROM_CART':\n      const itemToRemove = state.items.find(item => item.id === action.payload);\n      if (!itemToRemove) return state;\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload),\n        totalItems: state.totalItems - itemToRemove.quantity,\n        totalPrice: state.totalPrice - itemToRemove.price * itemToRemove.quantity\n      };\n    case 'UPDATE_QUANTITY':\n      const {\n        id,\n        quantity\n      } = action.payload;\n      const targetItem = state.items.find(item => item.id === id);\n      if (!targetItem) return state;\n      const quantityDiff = quantity - targetItem.quantity;\n      return {\n        ...state,\n        items: state.items.map(item => item.id === id ? {\n          ...item,\n          quantity\n        } : item),\n        totalItems: state.totalItems + quantityDiff,\n        totalPrice: state.totalPrice + targetItem.price * quantityDiff\n      };\n    case 'CLEAR_CART':\n      return initialState;\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState, () => {\n    // Load cart from localStorage if available\n    const localData = localStorage.getItem('cart');\n    return localData ? JSON.parse(localData) : initialState;\n  });\n\n  // Save cart state to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(state));\n  }, [state]);\n\n  // Actions\n  const addToCart = (product, quantity = 1) => {\n    dispatch({\n      type: 'ADD_TO_CART',\n      payload: {\n        ...product,\n        quantity\n      }\n    });\n  };\n  const removeFromCart = productId => {\n    dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: productId\n    });\n  };\n  const updateQuantity = (productId, quantity) => {\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        id: productId,\n        quantity\n      }\n    });\n  };\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      ...state,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using the cart context\n_s(CartProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useContext","useEffect","jsxDEV","_jsxDEV","initialState","items","totalItems","totalPrice","CartContext","cartReducer","state","action","type","existingItemIndex","findIndex","item","id","payload","updatedItems","quantity","price","itemToRemove","find","filter","targetItem","quantityDiff","map","CartProvider","children","_s","dispatch","localData","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","product","removeFromCart","productId","updateQuantity","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","undefined","Error","$RefreshReg$"],"sources":["E:/cartesia/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useReducer, useContext, useEffect } from 'react';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  items: [],\r\n  totalItems: 0,\r\n  totalPrice: 0,\r\n};\r\n\r\n// Create context\r\nconst CartContext = createContext(initialState);\r\n\r\n// Cart reducer\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      const existingItemIndex = state.items.findIndex(\r\n        (item) => item.id === action.payload.id\r\n      );\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // Item exists, update quantity\r\n        const updatedItems = [...state.items];\r\n        updatedItems[existingItemIndex] = {\r\n          ...updatedItems[existingItemIndex],\r\n          quantity: updatedItems[existingItemIndex].quantity + action.payload.quantity,\r\n        };\r\n        \r\n        return {\r\n          ...state,\r\n          items: updatedItems,\r\n          totalItems: state.totalItems + action.payload.quantity,\r\n          totalPrice: state.totalPrice + (action.payload.price * action.payload.quantity),\r\n        };\r\n      } else {\r\n        // Add new item\r\n        return {\r\n          ...state,\r\n          items: [...state.items, action.payload],\r\n          totalItems: state.totalItems + action.payload.quantity,\r\n          totalPrice: state.totalPrice + (action.payload.price * action.payload.quantity),\r\n        };\r\n      }\r\n    \r\n    case 'REMOVE_FROM_CART':\r\n      const itemToRemove = state.items.find(item => item.id === action.payload);\r\n      if (!itemToRemove) return state;\r\n      \r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item.id !== action.payload),\r\n        totalItems: state.totalItems - itemToRemove.quantity,\r\n        totalPrice: state.totalPrice - (itemToRemove.price * itemToRemove.quantity),\r\n      };\r\n      \r\n    case 'UPDATE_QUANTITY':\r\n      const { id, quantity } = action.payload;\r\n      const targetItem = state.items.find(item => item.id === id);\r\n      if (!targetItem) return state;\r\n      \r\n      const quantityDiff = quantity - targetItem.quantity;\r\n      \r\n      return {\r\n        ...state,\r\n        items: state.items.map(item => \r\n          item.id === id ? { ...item, quantity } : item\r\n        ),\r\n        totalItems: state.totalItems + quantityDiff,\r\n        totalPrice: state.totalPrice + (targetItem.price * quantityDiff),\r\n      };\r\n      \r\n    case 'CLEAR_CART':\r\n      return initialState;\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Provider component\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, initialState, () => {\r\n    // Load cart from localStorage if available\r\n    const localData = localStorage.getItem('cart');\r\n    return localData ? JSON.parse(localData) : initialState;\r\n  });\r\n  \r\n  // Save cart state to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  // Actions\r\n  const addToCart = (product, quantity = 1) => {\r\n    dispatch({\r\n      type: 'ADD_TO_CART',\r\n      payload: {\r\n        ...product,\r\n        quantity,\r\n      },\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (productId) => {\r\n    dispatch({\r\n      type: 'REMOVE_FROM_CART',\r\n      payload: productId,\r\n    });\r\n  };\r\n\r\n  const updateQuantity = (productId, quantity) => {\r\n    dispatch({\r\n      type: 'UPDATE_QUANTITY',\r\n      payload: {\r\n        id: productId,\r\n        quantity,\r\n      },\r\n    });\r\n  };\r\n\r\n  const clearCart = () => {\r\n    dispatch({ type: 'CLEAR_CART' });\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        ...state,\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        clearCart,\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (context === undefined) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default CartContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}